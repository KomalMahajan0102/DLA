# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""





'''Implementing Feedforward neural networks with Keras and TensorFlow
a. Import the necessary packages
b. Load the training and testing data (MNIST/CIFAR10)
c. Define the network architecture using Keras
d. Train the model using SGD
e. Evaluate the network
f. Plot the training loss and accuracy'''

# a. Import necessary packages
import tensorflow as tf
import random
from tensorflow import keras
import matplotlib.pyplot as plt

# b. Load the training and testing data (MNIST)
mnist = tf.keras.datasets.mnist

# Splitting it into training and testing data
(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train = x_train/255
x_test = x_test/255

# c. Define the network architecture using Keras
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
    ])

model.summary()

# d. Train the model using SGD
model.compile(optimizer='sgd',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy']
              )

history = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs = 10)


# e. Evaluate the network
test_loss, test_acc = model.evaluate(x_test, y_test)
print("Loss = %.3f" %test_loss)
print("Accuracy = %.3f" %test_acc)

n = random.randint(0, 9999)
plt.imshow(x_test[n])
plt.show()

# Predict the label for the chosen image
predicted_value = model.predict(x_test[n].reshape(1, 28, 28)) 
print("Predicted Value:", predicted_value.argmax())



# f. Plot the training loss and accuracy

    # Plotting the Training Accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('accuracy')
plt.xlabel("epoch")
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

    # Plotting the Training Loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel("epoch")
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()